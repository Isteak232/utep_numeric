
r = 32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559
g = 2


def modularMultiplication(a, b):
    return (a * b) % r


def modularExponentiation(a, b):
    if b == 0:
        return 1
    if b == 1:
        return a
    if (b % 2) == 0:
        return modularExponentiation(modularMultiplication(a, a), b // 2)
    return modularMultiplication(modularExponentiation(modularMultiplication(a, a), (b-1) // 2), a)

def alice_step1(a):
    A = modularExponentiation(g, a)
    return A

def bob(b, A):
    return ( modularExponentiation(g, b), modularExponentiation(A, b) )

def alice_step2(a, B):
    return modularExponentiation(B, a)

if __name__ == "__main__":
    a = 7217309172469120491439162461943986
    b = 8178209416239715718745016435160455
    A = alice_step1(a)
    B, K_B = bob(b, A)
    K_A = alice_step2(a, B)
    print("A = {}, B = {}, [K_A = {}, K_B = {}]".format(A, B, K_A, K_B))

    


    
